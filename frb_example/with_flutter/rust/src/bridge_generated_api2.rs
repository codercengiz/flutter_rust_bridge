#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.79.0.

use crate::api2::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_get_app_settings_to_api2_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_ApplicationSettings>(
        WrapInfo {
            debug_name: "get_app_settings_to_api2",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(get_app_settings_to_api2()),
    )
}
fn wire_get_fallible_app_settings_to_api2_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, mirror_ApplicationSettings>(
        WrapInfo {
            debug_name: "get_fallible_app_settings_to_api2",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| get_fallible_app_settings_to_api2(),
    )
}
fn wire_is_app_embedded_in_api2_impl(
    port_: MessagePort,
    app_settings: impl Wire2Api<ApplicationSettings> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, bool>(
        WrapInfo {
            debug_name: "is_app_embedded_in_api2",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_app_settings = app_settings.wire2api();
            move |task_callback| Ok(is_app_embedded_in_api2(api_app_settings))
        },
    )
}
// Section: wrapper structs

#[derive(Clone)]
pub struct mirror_ApplicationEnv(ApplicationEnv);

#[derive(Clone)]
pub struct mirror_ApplicationEnvVar(ApplicationEnvVar);

#[derive(Clone)]
pub struct mirror_ApplicationMode(ApplicationMode);

#[derive(Clone)]
pub struct mirror_ApplicationSettings(ApplicationSettings);

// Section: static checks

const _: fn() = || {
    {
        let ApplicationEnv = None::<ApplicationEnv>.unwrap();
        let _: Vec<ApplicationEnvVar> = ApplicationEnv.vars;
    }
    {
        let ApplicationEnvVar_ = None::<ApplicationEnvVar>.unwrap();
        let _: String = ApplicationEnvVar_.0;
        let _: bool = ApplicationEnvVar_.1;
    }
    match None::<ApplicationMode>.unwrap() {
        ApplicationMode::Standalone => {}
        ApplicationMode::Embedded => {}
    }
    {
        let ApplicationSettings = None::<ApplicationSettings>.unwrap();
        let _: String = ApplicationSettings.name;
        let _: String = ApplicationSettings.version;
        let _: ApplicationMode = ApplicationSettings.mode;
        let _: Box<ApplicationEnv> = ApplicationSettings.env;
        let _: Option<ApplicationEnv> = ApplicationSettings.env_optional;
    }
};
// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<ApplicationMode> for i32 {
    fn wire2api(self) -> ApplicationMode {
        match self {
            0 => ApplicationMode::Standalone,
            1 => ApplicationMode::Embedded,
            _ => unreachable!("Invalid variant for ApplicationMode: {}", self),
        }
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

// Section: impl IntoDart

impl support::IntoDart for mirror_ApplicationEnv {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.vars.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationEnv {}
impl rust2dart::IntoIntoDart<mirror_ApplicationEnv> for ApplicationEnv {
    fn into_into_dart(self) -> mirror_ApplicationEnv {
        mirror_ApplicationEnv(self)
    }
}

impl support::IntoDart for mirror_ApplicationEnvVar {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0 .0.into_into_dart().into_dart(),
            self.0 .1.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationEnvVar {}
impl rust2dart::IntoIntoDart<mirror_ApplicationEnvVar> for ApplicationEnvVar {
    fn into_into_dart(self) -> mirror_ApplicationEnvVar {
        mirror_ApplicationEnvVar(self)
    }
}

impl support::IntoDart for mirror_ApplicationMode {
    fn into_dart(self) -> support::DartAbi {
        match self.0 {
            ApplicationMode::Standalone => 0,
            ApplicationMode::Embedded => 1,
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationMode {}
impl rust2dart::IntoIntoDart<mirror_ApplicationMode> for ApplicationMode {
    fn into_into_dart(self) -> mirror_ApplicationMode {
        mirror_ApplicationMode(self)
    }
}

impl support::IntoDart for mirror_ApplicationSettings {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.name.into_into_dart().into_dart(),
            self.0.version.into_into_dart().into_dart(),
            self.0.mode.into_into_dart().into_dart(),
            self.0.env.into_into_dart().into_dart(),
            self.0
                .env_optional
                .map(|v| mirror_ApplicationEnv(v))
                .into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationSettings {}
impl rust2dart::IntoIntoDart<mirror_ApplicationSettings> for ApplicationSettings {
    fn into_into_dart(self) -> mirror_ApplicationSettings {
        mirror_ApplicationSettings(self)
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "bridge_generated_api2.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated_api2.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
